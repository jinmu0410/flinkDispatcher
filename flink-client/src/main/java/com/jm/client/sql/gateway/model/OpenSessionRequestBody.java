/*
 * Flink SQL Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2/1.18-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.jm.client.sql.gateway.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.jm.client.sql.gateway.invoker.JSON;

import java.io.IOException;
import java.util.*;

/**
 * OpenSessionRequestBody
 */

public class OpenSessionRequestBody {
    public static final String SERIALIZED_NAME_PROPERTIES = "properties";
    @SerializedName(SERIALIZED_NAME_PROPERTIES)
    private Map<String, String> properties = new HashMap<>();

    public static final String SERIALIZED_NAME_SESSION_NAME = "sessionName";
    @SerializedName(SERIALIZED_NAME_SESSION_NAME)
    private String sessionName;

    public OpenSessionRequestBody() {
    }

    public OpenSessionRequestBody properties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    public OpenSessionRequestBody putPropertiesItem(String key, String propertiesItem) {
        if (this.properties == null) {
            this.properties = new HashMap<>();
        }
        this.properties.put(key, propertiesItem);
        return this;
    }

    /**
     * Get properties
     *
     * @return properties
     **/
    //@javax.annotation.Nullable
    public Map<String, String> getProperties() {
        return properties;
    }

    public void setProperties(Map<String, String> properties) {
        this.properties = properties;
    }


    public OpenSessionRequestBody sessionName(String sessionName) {
        this.sessionName = sessionName;
        return this;
    }

    /**
     * Get sessionName
     *
     * @return sessionName
     **/
    //@javax.annotation.Nullable
    public String getSessionName() {
        return sessionName;
    }

    public void setSessionName(String sessionName) {
        this.sessionName = sessionName;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OpenSessionRequestBody openSessionRequestBody = (OpenSessionRequestBody) o;
        return Objects.equals(this.properties, openSessionRequestBody.properties) &&
                Objects.equals(this.sessionName, openSessionRequestBody.sessionName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(properties, sessionName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OpenSessionRequestBody {\n");
        sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
        sb.append("    sessionName: ").append(toIndentedString(sessionName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("properties");
        openapiFields.add("sessionName");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OpenSessionRequestBody
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OpenSessionRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in OpenSessionRequestBody is not found in the empty JSON string", OpenSessionRequestBody.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OpenSessionRequestBody.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenSessionRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("sessionName") != null && !jsonObj.get("sessionName").isJsonNull()) && !jsonObj.get("sessionName").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sessionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OpenSessionRequestBody.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OpenSessionRequestBody' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OpenSessionRequestBody> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(OpenSessionRequestBody.class));

            return (TypeAdapter<T>) new TypeAdapter<OpenSessionRequestBody>() {
                @Override
                public void write(JsonWriter out, OpenSessionRequestBody value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public OpenSessionRequestBody read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of OpenSessionRequestBody given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OpenSessionRequestBody
     * @throws IOException if the JSON string is invalid with respect to OpenSessionRequestBody
     */
    public static OpenSessionRequestBody fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OpenSessionRequestBody.class);
    }

    /**
     * Convert an instance of OpenSessionRequestBody to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

