/*
 * Flink SQL Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2/1.18-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.jm.client.sql.gateway.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.jm.client.sql.gateway.invoker.JSON;

import java.io.IOException;
import java.util.*;

/**
 * ResolvedSchema
 */

public class ResolvedSchema {
    public static final String SERIALIZED_NAME_COLUMN_COUNT = "columnCount";
    @SerializedName(SERIALIZED_NAME_COLUMN_COUNT)
    private Integer columnCount;

    public static final String SERIALIZED_NAME_COLUMN_DATA_TYPES = "columnDataTypes";
    @SerializedName(SERIALIZED_NAME_COLUMN_DATA_TYPES)
    private List<DataType> columnDataTypes;

    public static final String SERIALIZED_NAME_COLUMN_NAMES = "columnNames";
    @SerializedName(SERIALIZED_NAME_COLUMN_NAMES)
    private List<String> columnNames;

    public static final String SERIALIZED_NAME_COLUMNS = "columns";
    @SerializedName(SERIALIZED_NAME_COLUMNS)
    private List<Column> columns;

    public static final String SERIALIZED_NAME_PRIMARY_KEY = "primaryKey";
    @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
    private UniqueConstraint primaryKey;

    public static final String SERIALIZED_NAME_PRIMARY_KEY_INDEXES = "primaryKeyIndexes";
    @SerializedName(SERIALIZED_NAME_PRIMARY_KEY_INDEXES)
    private List<Integer> primaryKeyIndexes;

    public static final String SERIALIZED_NAME_WATERMARK_SPECS = "watermarkSpecs";
    @SerializedName(SERIALIZED_NAME_WATERMARK_SPECS)
    private List<WatermarkSpec> watermarkSpecs;

    public ResolvedSchema() {
    }

    public ResolvedSchema columnCount(Integer columnCount) {
        this.columnCount = columnCount;
        return this;
    }

    /**
     * Get columnCount
     *
     * @return columnCount
     **/
    //@javax.annotation.Nullable
    public Integer getColumnCount() {
        return columnCount;
    }

    public void setColumnCount(Integer columnCount) {
        this.columnCount = columnCount;
    }


    public ResolvedSchema columnDataTypes(List<DataType> columnDataTypes) {
        this.columnDataTypes = columnDataTypes;
        return this;
    }

    public ResolvedSchema addColumnDataTypesItem(DataType columnDataTypesItem) {
        if (this.columnDataTypes == null) {
            this.columnDataTypes = new ArrayList<>();
        }
        this.columnDataTypes.add(columnDataTypesItem);
        return this;
    }

    /**
     * Get columnDataTypes
     *
     * @return columnDataTypes
     **/
    //@javax.annotation.Nullable
    public List<DataType> getColumnDataTypes() {
        return columnDataTypes;
    }

    public void setColumnDataTypes(List<DataType> columnDataTypes) {
        this.columnDataTypes = columnDataTypes;
    }


    public ResolvedSchema columnNames(List<String> columnNames) {
        this.columnNames = columnNames;
        return this;
    }

    public ResolvedSchema addColumnNamesItem(String columnNamesItem) {
        if (this.columnNames == null) {
            this.columnNames = new ArrayList<>();
        }
        this.columnNames.add(columnNamesItem);
        return this;
    }

    /**
     * Get columnNames
     *
     * @return columnNames
     **/
    //@javax.annotation.Nullable
    public List<String> getColumnNames() {
        return columnNames;
    }

    public void setColumnNames(List<String> columnNames) {
        this.columnNames = columnNames;
    }


    public ResolvedSchema columns(List<Column> columns) {
        this.columns = columns;
        return this;
    }

    public ResolvedSchema addColumnsItem(Column columnsItem) {
        if (this.columns == null) {
            this.columns = new ArrayList<>();
        }
        this.columns.add(columnsItem);
        return this;
    }

    /**
     * Get columns
     *
     * @return columns
     **/
    //@javax.annotation.Nullable
    public List<Column> getColumns() {
        return columns;
    }

    public void setColumns(List<Column> columns) {
        this.columns = columns;
    }


    public ResolvedSchema primaryKey(UniqueConstraint primaryKey) {
        this.primaryKey = primaryKey;
        return this;
    }

    /**
     * Get primaryKey
     *
     * @return primaryKey
     **/
    //@javax.annotation.Nullable
    public UniqueConstraint getPrimaryKey() {
        return primaryKey;
    }

    public void setPrimaryKey(UniqueConstraint primaryKey) {
        this.primaryKey = primaryKey;
    }


    public ResolvedSchema primaryKeyIndexes(List<Integer> primaryKeyIndexes) {
        this.primaryKeyIndexes = primaryKeyIndexes;
        return this;
    }

    public ResolvedSchema addPrimaryKeyIndexesItem(Integer primaryKeyIndexesItem) {
        if (this.primaryKeyIndexes == null) {
            this.primaryKeyIndexes = new ArrayList<>();
        }
        this.primaryKeyIndexes.add(primaryKeyIndexesItem);
        return this;
    }

    /**
     * Get primaryKeyIndexes
     *
     * @return primaryKeyIndexes
     **/
    //@javax.annotation.Nullable
    public List<Integer> getPrimaryKeyIndexes() {
        return primaryKeyIndexes;
    }

    public void setPrimaryKeyIndexes(List<Integer> primaryKeyIndexes) {
        this.primaryKeyIndexes = primaryKeyIndexes;
    }


    public ResolvedSchema watermarkSpecs(List<WatermarkSpec> watermarkSpecs) {
        this.watermarkSpecs = watermarkSpecs;
        return this;
    }

    public ResolvedSchema addWatermarkSpecsItem(WatermarkSpec watermarkSpecsItem) {
        if (this.watermarkSpecs == null) {
            this.watermarkSpecs = new ArrayList<>();
        }
        this.watermarkSpecs.add(watermarkSpecsItem);
        return this;
    }

    /**
     * Get watermarkSpecs
     *
     * @return watermarkSpecs
     **/
    //@javax.annotation.Nullable
    public List<WatermarkSpec> getWatermarkSpecs() {
        return watermarkSpecs;
    }

    public void setWatermarkSpecs(List<WatermarkSpec> watermarkSpecs) {
        this.watermarkSpecs = watermarkSpecs;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResolvedSchema resolvedSchema = (ResolvedSchema) o;
        return Objects.equals(this.columnCount, resolvedSchema.columnCount) &&
                Objects.equals(this.columnDataTypes, resolvedSchema.columnDataTypes) &&
                Objects.equals(this.columnNames, resolvedSchema.columnNames) &&
                Objects.equals(this.columns, resolvedSchema.columns) &&
                Objects.equals(this.primaryKey, resolvedSchema.primaryKey) &&
                Objects.equals(this.primaryKeyIndexes, resolvedSchema.primaryKeyIndexes) &&
                Objects.equals(this.watermarkSpecs, resolvedSchema.watermarkSpecs);
    }

    @Override
    public int hashCode() {
        return Objects.hash(columnCount, columnDataTypes, columnNames, columns, primaryKey, primaryKeyIndexes, watermarkSpecs);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ResolvedSchema {\n");
        sb.append("    columnCount: ").append(toIndentedString(columnCount)).append("\n");
        sb.append("    columnDataTypes: ").append(toIndentedString(columnDataTypes)).append("\n");
        sb.append("    columnNames: ").append(toIndentedString(columnNames)).append("\n");
        sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
        sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
        sb.append("    primaryKeyIndexes: ").append(toIndentedString(primaryKeyIndexes)).append("\n");
        sb.append("    watermarkSpecs: ").append(toIndentedString(watermarkSpecs)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("columnCount");
        openapiFields.add("columnDataTypes");
        openapiFields.add("columnNames");
        openapiFields.add("columns");
        openapiFields.add("primaryKey");
        openapiFields.add("primaryKeyIndexes");
        openapiFields.add("watermarkSpecs");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ResolvedSchema
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ResolvedSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in ResolvedSchema is not found in the empty JSON string", ResolvedSchema.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ResolvedSchema.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResolvedSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("columnDataTypes") != null && !jsonObj.get("columnDataTypes").isJsonNull()) {
            JsonArray jsonArraycolumnDataTypes = jsonObj.getAsJsonArray("columnDataTypes");
            if (jsonArraycolumnDataTypes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("columnDataTypes").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `columnDataTypes` to be an array in the JSON string but got `%s`", jsonObj.get("columnDataTypes").toString()));
                }

                // validate the optional field `columnDataTypes` (array)
                for (int i = 0; i < jsonArraycolumnDataTypes.size(); i++) {
                    DataType.validateJsonElement(jsonArraycolumnDataTypes.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("columnNames") != null && !jsonObj.get("columnNames").isJsonNull() && !jsonObj.get("columnNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columnNames` to be an array in the JSON string but got `%s`", jsonObj.get("columnNames").toString()));
        }
        if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
            JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
            if (jsonArraycolumns != null) {
                // ensure the json data is an array
                if (!jsonObj.get("columns").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
                }

                // validate the optional field `columns` (array)
                for (int i = 0; i < jsonArraycolumns.size(); i++) {
                    Column.validateJsonElement(jsonArraycolumns.get(i));
                }
                ;
            }
        }
        // validate the optional field `primaryKey`
        if (jsonObj.get("primaryKey") != null && !jsonObj.get("primaryKey").isJsonNull()) {
            UniqueConstraint.validateJsonElement(jsonObj.get("primaryKey"));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("primaryKeyIndexes") != null && !jsonObj.get("primaryKeyIndexes").isJsonNull() && !jsonObj.get("primaryKeyIndexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `primaryKeyIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("primaryKeyIndexes").toString()));
        }
        if (jsonObj.get("watermarkSpecs") != null && !jsonObj.get("watermarkSpecs").isJsonNull()) {
            JsonArray jsonArraywatermarkSpecs = jsonObj.getAsJsonArray("watermarkSpecs");
            if (jsonArraywatermarkSpecs != null) {
                // ensure the json data is an array
                if (!jsonObj.get("watermarkSpecs").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `watermarkSpecs` to be an array in the JSON string but got `%s`", jsonObj.get("watermarkSpecs").toString()));
                }

                // validate the optional field `watermarkSpecs` (array)
                for (int i = 0; i < jsonArraywatermarkSpecs.size(); i++) {
                    WatermarkSpec.validateJsonElement(jsonArraywatermarkSpecs.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ResolvedSchema.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ResolvedSchema' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ResolvedSchema> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(ResolvedSchema.class));

            return (TypeAdapter<T>) new TypeAdapter<ResolvedSchema>() {
                @Override
                public void write(JsonWriter out, ResolvedSchema value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public ResolvedSchema read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of ResolvedSchema given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ResolvedSchema
     * @throws IOException if the JSON string is invalid with respect to ResolvedSchema
     */
    public static ResolvedSchema fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ResolvedSchema.class);
    }

    /**
     * Convert an instance of ResolvedSchema to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

