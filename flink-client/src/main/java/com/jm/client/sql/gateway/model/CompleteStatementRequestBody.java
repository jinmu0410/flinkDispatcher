/*
 * Flink SQL Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2/1.18-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.jm.client.sql.gateway.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.jm.client.sql.gateway.invoker.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CompleteStatementRequestBody
 */
public class CompleteStatementRequestBody {
    public static final String SERIALIZED_NAME_STATEMENT = "statement";
    @SerializedName(SERIALIZED_NAME_STATEMENT)
    private String statement;

    public static final String SERIALIZED_NAME_POSITION = "position";
    @SerializedName(SERIALIZED_NAME_POSITION)
    private Integer position;

    public CompleteStatementRequestBody() {
    }

    public CompleteStatementRequestBody statement(String statement) {
        this.statement = statement;
        return this;
    }

    /**
     * Get statement
     *
     * @return statement
     **/
    //@javax.annotation.Nullable
    public String getStatement() {
        return statement;
    }

    public void setStatement(String statement) {
        this.statement = statement;
    }


    public CompleteStatementRequestBody position(Integer position) {
        this.position = position;
        return this;
    }

    /**
     * Get position
     *
     * @return position
     **/
    //@javax.annotation.Nullable
    public Integer getPosition() {
        return position;
    }

    public void setPosition(Integer position) {
        this.position = position;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompleteStatementRequestBody completeStatementRequestBody = (CompleteStatementRequestBody) o;
        return Objects.equals(this.statement, completeStatementRequestBody.statement) &&
                Objects.equals(this.position, completeStatementRequestBody.position);
    }

    @Override
    public int hashCode() {
        return Objects.hash(statement, position);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CompleteStatementRequestBody {\n");
        sb.append("    statement: ").append(toIndentedString(statement)).append("\n");
        sb.append("    position: ").append(toIndentedString(position)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("statement");
        openapiFields.add("position");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CompleteStatementRequestBody
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CompleteStatementRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CompleteStatementRequestBody is not found in the empty JSON string", CompleteStatementRequestBody.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CompleteStatementRequestBody.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompleteStatementRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("statement") != null && !jsonObj.get("statement").isJsonNull()) && !jsonObj.get("statement").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `statement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CompleteStatementRequestBody.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CompleteStatementRequestBody' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CompleteStatementRequestBody> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(CompleteStatementRequestBody.class));

            return (TypeAdapter<T>) new TypeAdapter<CompleteStatementRequestBody>() {
                @Override
                public void write(JsonWriter out, CompleteStatementRequestBody value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CompleteStatementRequestBody read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CompleteStatementRequestBody given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CompleteStatementRequestBody
     * @throws IOException if the JSON string is invalid with respect to CompleteStatementRequestBody
     */
    public static CompleteStatementRequestBody fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CompleteStatementRequestBody.class);
    }

    /**
     * Convert an instance of CompleteStatementRequestBody to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

